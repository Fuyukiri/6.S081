1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

a0-a7, a2


2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)

no call in assembly code, compiler inline the functions

26:	45b1                	li	a1,12
it just calcultes the f,g to get the value of 12


3. At what address is the function printf located?

from this 
34:	600080e7          	jalr	1536(ra) # 630 <printf>
0000000000000630 


4. What value is in the register ra just after the jalr to printf in main?

34:	600080e7          	jalr	1536(ra) # 630 <printf>
So the ra should be the next instruction 34+4 = 38

5 Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
5.1 What is the output? 

He110 World

5.2 If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

set i to 0x726c6400 
57616 should remain same


6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
    printf("x=%d y=%d", 3);
We don't know the answer. The printf() function is expecting a second argument to match the format specifier "%d" for printing the value of y, but there is no argument corresponding to that. As a result, printf() will try to print whatever value is present on the stack at the location where the second argument was expected to be, leading to undefined behavior and potentially printing some garbage value.

